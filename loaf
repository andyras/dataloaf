#!/usr/bin/env python2.7

debug = True

import numpy as np
import matplotlib as mp

mp.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

import os
import wx
import glob

loafrc = os.getenv("HOME")+"/.loafrc"

class Datum(object):
    '''
    A data point; there is one for every point on the 2D data plot.  This object
    stores information about the data as well as filenames.
    '''
    def __init__(self, xIdx, yIdx, x, y):
        self.xIdx = xIdx
        self.yIdx = yIdx
        self.x = x[0]
        self.xStr = x[1]
        self.y = y[0]
        self.yStr = y[1]
        self.z = 0.0
        self.path = None
        self.file1D = None
        self.file2D = None

    def __str__(self):
        retStr = '(%d, %d): (%f, %f, %f)\n' % (self.xIdx, self.yIdx, self.x, self.y, self.z)
        retStr += '1D file: %s\n' % self.file1D
        retStr += '2D file: %s\n' % self.file2D
        return retStr

    def getTitle(self):
        return 'Data point (%d, %d):\nvalues (%8.3f, %8.3f, %8.3f)' % (self.xIdx, self.yIdx, self.x, self.y, self.z)

class mainFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent=None, title='Data Loaf', size=(900,600), pos=(50,50))

        self.panel = CanvasPanel(self)

        #### make menu bar and menu

        self.filemenu = wx.Menu()
        self.exitId = wx.NewId()
        # TODO: why do these texts/shortcuts not show up in the same way in the actual menu?
        self.menuExit = self.filemenu.Append(id=-1, text='Exit\tCtrl+w', help='Quit')
        self.menuLoad = self.filemenu.Append(id=-1, text='Load data\tCtrl+l', help='Load data')
        self.menuReset = self.filemenu.Append(id=-1, text='Reset 1D plot\tCtrl+r', help='Reset 1D plot')
        self.menuHUD = self.filemenu.Append(id=-1, text='Show HUD for datum\tCtrl+h', help='Show HUD for current datum')

        self.menubar = wx.MenuBar()
        self.menubar.Append(self.filemenu, title='File')
        self.SetMenuBar(self.menubar)

        self.Bind(wx.EVT_MENU, self.onExit, source=self.menuExit)
        self.Bind(wx.EVT_MENU, self.panel.onLoad, source=self.menuLoad)
        self.Bind(wx.EVT_MENU, self.panel.onReset, source=self.menuReset)
        self.Bind(wx.EVT_MENU, self.panel.onHUD, source=self.menuHUD)

    def onExit(self, e):
        self.Close(True)

class CanvasPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        self.xIdx = 0
        self.yIdx = 0

        #### make sizers

        self.topSizer = wx.BoxSizer(wx.VERTICAL)
        self.plotSizer = wx.BoxSizer(wx.VERTICAL)
        self.inputSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.textDataSizer = wx.GridSizer(0, 2, 5, 5)
        self.textInputSizer = wx.GridSizer(0, 2, 5, 5)
        self.buttonSizer = wx.BoxSizer(wx.VERTICAL)

        #### add sizers to each other

        self.topSizer.Add(self.plotSizer, 1, wx.EXPAND)
        self.topSizer.Add(self.inputSizer, 0, wx.EXPAND)
        self.inputSizer.Add(self.textDataSizer, 0, wx.EXPAND)
        self.inputSizer.Add(self.textInputSizer, 1, wx.EXPAND)
        self.inputSizer.Add(self.buttonSizer, 0, wx.EXPAND)

        #### make objects

        # mp figure object for 1D plot
        self.figure = Figure()
        gs = mp.gridspec.GridSpec(1, 2, width_ratios=[1,1.618])
        self.axes2D = self.figure.add_subplot(gs[0])
        self.axes1D = self.figure.add_subplot(gs[1])
        self.plot = FigureCanvas(self, -1, self.figure)
        plt = self.drawPlot1D(True)
        self.drawPlot2D()
        # bind clicking on plot
        self.plot.mpl_connect('button_press_event', self.onPlotClick)
        self.plot.mpl_connect('key_press_event', self.onKey)

        # text data objects
        self.xIdxText = wx.StaticText(self, -1, 'x index')
        self.yIdxText = wx.StaticText(self, -1, 'y index')
        self.xDataText = wx.StaticText(self, -1, 'x datum')
        self.yDataText = wx.StaticText(self, -1, 'y datum')
        self.zDataText = wx.StaticText(self, -1, 'z datum')
        self.xIdxTextOut = wx.TextCtrl(self, -1, '')
        self.yIdxTextOut = wx.TextCtrl(self, -1, '')
        self.xTextOut = wx.TextCtrl(self, -1, '')
        self.yTextOut = wx.TextCtrl(self, -1, '')
        self.zTextOut = wx.TextCtrl(self, -1, '')

        # text input objects
        self.baseText = wx.StaticText(self, -1, "base pathname")
        self.middleText = wx.StaticText(self, -1, "middle of pathname")
        self.endText = wx.StaticText(self, -1, "end of pathname")
        self.text1D = wx.StaticText(self, -1, "1D data file")
        self.text2D = wx.StaticText(self, -1, "2D data file")
        if (debug):
            self.baseInput = wx.TextCtrl(self, -1, "./data/x")
            self.middleInput = wx.TextCtrl(self, -1, "_y")
            self.endInput = wx.TextCtrl(self, -1, "")
            self.text1DInput = wx.TextCtrl(self, -1, "pts.dat")
            self.text2DInput = wx.TextCtrl(self, -1, "dat.dat")
        else:
            # check if last parameters were saved in .loafrc
            try:
                with open(loafrc, "r") as i:
                    lines = i.readlines()
                    self.baseInput = wx.TextCtrl(self, -1, lines[0].strip())
                    self.middleInput = wx.TextCtrl(self, -1, lines[1].strip())
                    self.endInput = wx.TextCtrl(self, -1, lines[2].strip())
                    self.text1DInput = wx.TextCtrl(self, -1, lines[3].strip())
                    self.text2DInput = wx.TextCtrl(self, -1, lines[4].strip())
            # default to blank entry fields
            except IOError:
                print("WARNING: ~/.loafrc does not exist")
                self.baseInput = wx.TextCtrl(self, -1, "")
                self.middleInput = wx.TextCtrl(self, -1, "")
                self.endInput = wx.TextCtrl(self, -1, "")
                self.text1DInput = wx.TextCtrl(self, -1, "")
                self.text2DInput = wx.TextCtrl(self, -1, "")
            except IndexError:
                print("WARNING: ~/.loafrc corrupted or empty")
                self.baseInput = wx.TextCtrl(self, -1, "")
                self.middleInput = wx.TextCtrl(self, -1, "")
                self.endInput = wx.TextCtrl(self, -1, "")
                self.text1DInput = wx.TextCtrl(self, -1, "")
                self.text2DInput = wx.TextCtrl(self, -1, "")

        self.loadBtn = wx.Button(self, -1, "Load Data")
        self.Bind(wx.EVT_BUTTON, self.onLoad, id=self.loadBtn.GetId())

        self.resetBtn = wx.Button(self, -1, "Reset 1D Plot")
        self.Bind(wx.EVT_BUTTON, self.onReset, id=self.resetBtn.GetId())

        #### add objects to sizers

        # plot sizer
        self.plotSizer.Add(self.plot, 1, wx.EXPAND)

        # text data sizer
        self.textDataSizer.Add(self.xIdxText, 0, wx.ALIGN_RIGHT)
        self.textDataSizer.Add(self.xIdxTextOut, 1, wx.EXPAND)
        self.textDataSizer.Add(self.yIdxText, 0, wx.ALIGN_RIGHT)
        self.textDataSizer.Add(self.yIdxTextOut, 1, wx.EXPAND)
        self.textDataSizer.Add(self.xDataText, 0, wx.ALIGN_RIGHT)
        self.textDataSizer.Add(self.xTextOut, 1, wx.EXPAND)
        self.textDataSizer.Add(self.yDataText, 0, wx.ALIGN_RIGHT)
        self.textDataSizer.Add(self.yTextOut, 1, wx.EXPAND)
        self.textDataSizer.Add(self.zDataText, 0, wx.ALIGN_RIGHT)
        self.textDataSizer.Add(self.zTextOut, 1, wx.EXPAND)

        # text input sizer
        self.textInputSizer.Add(self.baseText, 0, wx.ALIGN_RIGHT)
        self.textInputSizer.Add(self.baseInput, 1, wx.EXPAND)
        self.textInputSizer.Add(self.middleText, 0, wx.ALIGN_RIGHT)
        self.textInputSizer.Add(self.middleInput, 1, wx.EXPAND)
        self.textInputSizer.Add(self.endText, 0, wx.ALIGN_RIGHT)
        self.textInputSizer.Add(self.endInput, 1, wx.EXPAND)
        self.textInputSizer.Add(self.text1D, 0, wx.ALIGN_RIGHT)
        self.textInputSizer.Add(self.text1DInput, 1, wx.EXPAND)
        self.textInputSizer.Add(self.text2D, 0, wx.ALIGN_RIGHT)
        self.textInputSizer.Add(self.text2DInput, 1, wx.EXPAND)
        self.buttonSizer.Add(self.loadBtn, 0, wx.EXPAND)
        self.buttonSizer.Add(self.resetBtn, 0, wx.EXPAND)

        #### set sizer for panel

        self.SetSizer(self.topSizer)
        self.Fit()

    def onKey(self, e):
        if (debug):
            print('you pressed', e.key, e.xdata, e.ydata)
        # make sure data has been plotted
        if ((hasattr(self, 'xDim')) and (hasattr(self,'yDim'))):
            # make sure plot has been clicked
            if ((self.xIdx > -1) and (self.yIdx > -1)):
                if (e.key == 'up'):
                    if (self.yIdx < (self.yDim - 1)):
                        self.yIdx += 1
                        if (debug):
                            print 'going one up'
                        self.plotUpdate()
                if (e.key == 'right'):
                    if (self.xIdx < (self.xDim - 1)):
                        self.xIdx += 1
                        if (debug):
                            print 'going one right'
                        self.plotUpdate()
                if (e.key == 'down'):
                    if (self.yIdx > 0):
                        self.yIdx -= 1
                        if (debug):
                            print 'going one down'
                        self.plotUpdate()
                if (e.key == 'left'):
                    if (self.xIdx > 0):
                        self.xIdx -= 1
                        if (debug):
                            print 'going one left'
                        self.plotUpdate()
            else:
                if (debug):
                    print 'indices not valid'
        else:
            if (debug):
                print 'attribute not defined'

    def onLoad(self, e):
        '''
        1. Glob to find directories with data
         a. Assume rectangular data set, i.e. all y values for all x values
        2. Add (x,y) data file names to map, read 2D data into array
        '''

        basePath = self.baseInput.GetValue()
        midPath = self.middleInput.GetValue()
        endPath = self.endInput.GetValue()

        globber = basePath + '*' + midPath + '*' + endPath
        globs = glob.glob(globber)
        if (debug):
            print globber
            print globs

        # sets of x and y points
        xpts = set([])
        ypts = set([])

        for glb in globs:
            # index of midPath will be after basePath
            midIdx = glb.find(midPath, len(basePath))
            # index of endPath will be after midPath
            if (endPath == ''):
                endIdx = len(glb)
            else:
                endIdx = glb.find(endPath, midIdx+len(midPath))
            # between basePath and midPath is x datum
            xpts.add(glb[len(basePath):midIdx])
            # between midPath and endPath is y datum
            ypts.add(glb[midIdx+len(midPath):endIdx])

        if (debug):
            print 'xpts:', xpts
            print 'ypts:', ypts

        # map of x, y value to file string
        self.xData = []
        for x in list(xpts):
            self.xData.append((float(x), x))
        self.xData.sort()

        self.yData = []
        for y in list(ypts):
            self.yData.append((float(y), y))
        self.yData.sort()

        if (debug):
            print 'xData:', self.xData
            print 'yData:', self.yData

        if (True):
            print("setting xDim and yDim")
        self.xDim = len(self.xData)
        self.yDim = len(self.yData)
        if (debug):
            print("xDim is ", self.xDim)
            print("yDim is ", self.xDim)
        self.zData = np.zeros(self.xDim*self.yDim).reshape(self.xDim, self.yDim)

        self.dataMap = {}
        for ii in range(len(self.xData)):
            for jj in range(len(self.yData)):
                # create datum object
                datum = Datum(ii, jj, self.xData[ii], self.yData[jj])
                datumPath = basePath + datum.xStr + midPath + datum.yStr + endPath + '/'
                datum.path = datumPath
                datum.file1D = datumPath + self.text1DInput.GetValue()
                datum.file2D = datumPath + self.text2DInput.GetValue()
                if (datum.file2D != ''):
                    try:
                        datum.z = np.loadtxt(datum.file2D)
                    except IOError:
                        if (debug):
                            print 'loading from %s failed: file does not exist' % datum.file2D
                else:
                    datum.z = np.array([0.0])
                self.dataMap[(ii, jj)] = datum

                # add to zData matrix
                self.zData[ii, jj] = datum.z

        if (debug):
            for datum in self.dataMap.values():
                print datum
            print self.zData

        # important to reset indices if loading different data sets
        self.xIdx, self.yIdx = 0, 0

        # reset plots
        self.resetPlots()

        # set focus on plot
        self.plot.SetFocus()

        # update .loafrc
        if (not debug):
            try:
                with open(loafrc, "w") as f:
                    f.write(self.baseInput.GetValue()+"\n")
                    f.write(self.middleInput.GetValue()+"\n")
                    f.write(self.endInput.GetValue()+"\n")
                    f.write(self.text1DInput.GetValue()+"\n")
                    f.write(self.text2DInput.GetValue()+"\n")
            except IOError:
                print("WARNING: cannot write parameters to ~/.loafrc")

    def onReset(self, e):
        '''
        Reset the plots
        '''
        self.resetPlots()

    def onHUD(self, e):
        from subprocess import call
        HUDPath = self.getCurrentDatum().path
        try:
            call(["hud.py", "-d", HUDPath, "-o"])
        except OSError:
            print("hud.py not found in path.")

    def resetPlots(self):
        '''
        Reset both plots
        '''
        self.drawPlot2D()
        self.drawPlot1D(True)
        self.plotUpdate()

    def drawPlot1D(self, clear=False):
        '''
        Plot 1D data if the file exists
        '''
        if (clear):
            self.axes1D.cla()
        else:
            try:
                # assign filename to current datum
                fileName = self.getCurrentDatum().file1D
                try:
                    # load/plot data file
                    data = np.loadtxt(fileName)
                    plt = self.axes1D.plot(data[:,0], data[:,1])

                    self.figure.tight_layout()
                    self.plot.draw()

                    return plt

                except IOError:
                    if (debug):
                        print 'file %s does not exist, not plotting.' % fileName
            except AttributeError:
                if (debug):
                    print 'datum does not exist, not plotting'

        return None

    def drawPlot2D(self):
        '''
        Draw 2D plot.  If data not loaded, leave axes clear.
        '''
        # always start with a blank axis
        self.axes2D.cla()

        # plot data if loaded
        try:
            self.axes2D.imshow(self.zData, interpolation='none')
            print("xlabels:",[datum[1] for datum in self.xData])
        except AttributeError:
            if (debug):
                print 'There is no self.zData matrix'
        # draw grid, labels
        try:
            # draw grid
            self.axes2D.set_xticks(np.arange(0,self.xDim+1) - 0.5, minor=True)
            self.axes2D.set_yticks(np.arange(0,self.yDim+1) - 0.5, minor=True)
            self.axes2D.grid(ls='solid', color='w', which='minor')
            # write labels
            xTickLabels = ['']
            for datum in self.xData:
                xTickLabels.append(datum[1])
                xTickLabels.append('')
            yTickLabels = ['']
            for datum in self.yData:
                yTickLabels.append(datum[1])
                yTickLabels.append('')
            self.axes2D.set_xticklabels(xTickLabels, rotation=90)
            self.axes2D.set_yticklabels(yTickLabels)
        except AttributeError, e:
            print("not working: %s" % e)

        self.figure.tight_layout()
        self.plot.draw()

    def updateHighlight(self, plt):
        '''
        update the position of the marker for the latest plot
        '''
        if (debug):
            print 'Plotting highlight, data index: (%d, %d): ' % (self.xIdx, self.yIdx)

        try:
            c = plt[0].get_color()
        except TypeError:
            if (debug):
                print '1D plot was not made, defaulting to white circle'
            c = 'white'

        # add white-bordered circle to 2D plot, reset axis limits
        self.axes2D.plot([self.xIdx], [self.yIdx], 'o', ms=12, mec='white', mew=2, color=c)
        self.axes2D.set_xlim([-0.5, self.xDim-0.5])
        self.axes2D.set_ylim([-0.5, self.yDim-0.5])

        # redraw plot
        self.plot.draw()

    def setOutData(self):
        '''
        Set the output text data according to one datum.
        '''
        try:
            datum = self.getCurrentDatum()
            self.xIdxTextOut.SetValue(str(datum.xIdx))
            self.yIdxTextOut.SetValue(str(datum.yIdx))
            self.xTextOut.SetValue(str(datum.x))
            self.yTextOut.SetValue(str(datum.y))
            self.zTextOut.SetValue(str(datum.z))
        except:
            if (debug):
                print 'datum does not exist, ignoring title'

    def onPlotClick(self, e):
        '''
        On click on 2D plot, update the 1D plot with the appropriate data file
        '''
        if (e.inaxes == self.axes2D):
            try:
                self.xIdx, self.yIdx = int(round(e.xdata)), int(round(e.ydata))
                if (debug):
                    print 'button=%d, x=%d, y=%d, xdata=%f, ydata=%f'%(
                        e.button, e.x, e.y, e.xdata, e.ydata)
                    print self.xIdx, self.yIdx
                self.plotUpdate()
            except:
                if (debug):
                    print 'Clicked data not loaded, not plotting.'

    def plotUpdate(self):
        '''
        Basic plotting action: plots 1D data, and updates highlight on 2D plot.
        Defaults to plotting datum at current position on 2D grid.
        '''

        # update 1D plot
        plt = self.drawPlot1D()

        # update highlight
        self.updateHighlight(plt)

        # update output text
        self.setOutData()

    def getCurrentDatum(self):
        '''
        Returns current datum based on indices
        '''
        try:
            return self.dataMap[(self.xIdx, self.yIdx)]
        except AttributeError:
            if (debug):
                'Datum does not exist, returning None'
            return None

if __name__ == "__main__":
    app = wx.App(False)
    fr = mainFrame(None)
    fr.Show()
    # start with focus on first input text box
    fr.panel.baseInput.SetFocus()
    app.MainLoop()
