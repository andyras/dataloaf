#!/usr/bin/env python2.7

debug = True

import numpy as np
import matplotlib as mp

mp.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

import wx
import glob

class Datum(object):
    '''
    A data point; there is one for every point on the 2D data plot.  This object
    stores information about the data as well as filenames.
    '''
    def __init__(self, xIdx, yIdx, x, y):
        self.xIdx = xIdx
        self.yIdx = yIdx
        self.x = x[0]
        self.xStr = x[1]
        self.y = y[0]
        self.yStr = y[1]
        self.z = 0.0
        self.file1D = None
        self.file2D = None

    def __str__(self):
        retStr = '(%d, %d): (%f, %f, %f)\n' % (self.xIdx, self.yIdx, self.x, self.y, self.z)
        retStr += '1D file: %s\n' % self.file1D
        retStr += '2D file: %s\n' % self.file2D
        return retStr

class mainFrame(wx.Frame):
    def __init__(self, parent):
        wx.Frame.__init__(self, parent=None, title='Main frame', size=(1000,600), pos=(50,50))

        #### make menu bar and menu

        self.filemenu = wx.Menu()
        self.exitId, self.aboutId = wx.NewId(), wx.NewId()
        # TODO: why do these texts/shortcuts not show up in the same way in the actual menu?
        self.menuAbout = self.filemenu.Append(id=self.aboutId, text='About\tCtrl+a', help='Informations')
        self.menuExit = self.filemenu.Append(id=self.exitId, text='Exit\tCtrl+w', help='Quit')

        self.menubar = wx.MenuBar()
        self.menubar.Append(self.filemenu, title='File')
        self.SetMenuBar(self.menubar)

        self.Bind(wx.EVT_MENU, self.onAbout, source=self.menuAbout)
        self.Bind(wx.EVT_MENU, self.onExit, source=self.menuExit)

    def onAbout(self, e):
        dlg = wx.MessageDialog(self, 'A data explorer.', 'About the data explorer', wx.OK)
        dlg.ShowModal()
        dlg.Destroy()

    def onExit(self, e):
        self.Close(True)


class CanvasPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)

        #### make sizers

        self.topSizer = wx.BoxSizer(wx.VERTICAL)
        self.plotSizer = wx.BoxSizer(wx.VERTICAL)
        self.inputSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.textInputSizer = wx.GridSizer(0, 2, 5, 5)

        #### add sizers to each other

        self.topSizer.Add(self.plotSizer, 1, wx.EXPAND)
        self.topSizer.Add(self.inputSizer, 0, wx.EXPAND)
        self.inputSizer.Add(self.textInputSizer, 1, wx.EXPAND)

        #### make objects

        # mp figure object for 1D plot
        self.figure1D = Figure()
        gs = mp.gridspec.GridSpec(1, 2, width_ratios=[1,1.618])
        self.axes2D = self.figure1D.add_subplot(gs[0])
        self.axes1D = self.figure1D.add_subplot(gs[1])
        self.plot1D = FigureCanvas(self, -1, self.figure1D)
        self.drawPlot1D('data/d1_1_d2_1/pts.dat')
        self.drawPlot2D()

        # text input objects
        self.baseText = wx.StaticText(self, -1, "base pathname")
        self.middleText = wx.StaticText(self, -1, "middle of pathname")
        self.endText = wx.StaticText(self, -1, "end of pathname")
        self.text1D = wx.StaticText(self, -1, "1D data file")
        self.text2D = wx.StaticText(self, -1, "2D data file")
        if (debug):
            self.baseInput = wx.TextCtrl(self, -1, "./data/d1_")
            self.middleInput = wx.TextCtrl(self, -1, "_d2_")
            self.endInput = wx.TextCtrl(self, -1, "")
            self.text1DInput = wx.TextCtrl(self, -1, "pts.dat")
            self.text2DInput = wx.TextCtrl(self, -1, "dat.dat")
        else:
            self.baseInput = wx.TextCtrl(self, -1, "")
            self.middleInput = wx.TextCtrl(self, -1, "")
            self.endInput = wx.TextCtrl(self, -1, "")
            self.text1DInput = wx.TextCtrl(self, -1, "")
            self.text2DInput = wx.TextCtrl(self, -1, "")

        self.loadBtn = wx.Button(self, -1, "Load Data")
        self.Bind(wx.EVT_BUTTON, self.onLoad, id=self.loadBtn.GetId())

        #### add objects to sizers

        self.plotSizer.Add(self.plot1D, 1, wx.EXPAND)
        self.textInputSizer.Add(self.baseText, 1, wx.ALIGN_LEFT)
        self.textInputSizer.Add(self.baseInput, 2, wx.EXPAND)
        self.textInputSizer.Add(self.middleText, 1, wx.ALIGN_LEFT)
        self.textInputSizer.Add(self.middleInput, 2, wx.EXPAND)
        self.textInputSizer.Add(self.endText, 1, wx.ALIGN_LEFT)
        self.textInputSizer.Add(self.endInput, 2, wx.EXPAND)
        self.textInputSizer.Add(self.text1D, 1, wx.ALIGN_LEFT)
        self.textInputSizer.Add(self.text1DInput, 2, wx.EXPAND)
        self.textInputSizer.Add(self.text2D, 1, wx.ALIGN_LEFT)
        self.textInputSizer.Add(self.text2DInput, 2, wx.EXPAND)
        self.inputSizer.Add(self.loadBtn, 0, wx.EXPAND)

        #### set sizer for panel

        self.SetSizer(self.topSizer)
        self.Fit()

    def onLoad(self, e):
        '''
        1. Glob to find directories with data
         a. Assume rectangular data set, i.e. all y values for all x values
        2. Add (x,y) data file names to map, read 2D data into array
        '''

        basePath = self.baseInput.GetValue()
        midPath = self.middleInput.GetValue()
        endPath = self.endInput.GetValue()

        globber = basePath + '*' + midPath + '*' + endPath
        globs = glob.glob(globber)
        if (debug):
            print globber
            print globs

        # sets of x and y points
        xpts = set([])
        ypts = set([])

        for glb in globs:
            # index of midPath will be after basePath
            midIdx = glb.find(midPath, len(basePath))
            # index of endPath will be after midPath
            if (endPath == ''):
                endIdx = len(glb)
            else:
                endIdx = glb.find(endPath, midIdx+len(midPath))
            # between basePath and midPath is x datum
            xpts.add(glb[len(basePath):midIdx])
            # between midPath and endPath is y datum
            ypts.add(glb[midIdx+len(midPath):endIdx])

        if (debug):
            print 'xpts:', xpts
            print 'ypts:', ypts

        # map of x, y value to file string
        self.xData = []
        for x in xpts:
            self.xData.append((float(x), x))

        self.yData = []
        for y in ypts:
            self.yData.append((float(y), y))

        if (debug):
            print 'xData:', self.xData
            print 'yData:', self.yData

        self.xDim = len(self.xData)
        self.yDim = len(self.yData)
        self.zData = np.zeros(self.xDim*self.yDim).reshape(self.xDim, self.yDim)

        dataMap = {}
        for ii in range(len(self.xData)):
            for jj in range(len(self.yData)):
                # create datum object
                datum = Datum(ii, jj, self.xData[ii], self.yData[jj])
                datumPath = basePath + datum.xStr + midPath + datum.yStr + endPath + '/'
                datum.file1D = datumPath + self.text1DInput.GetValue()
                datum.file2D = datumPath + self.text2DInput.GetValue()
                try:
                    datum.z = np.loadtxt(datum.file2D)
                except IOError:
                    if (debug):
                        print 'loading from %s failed: file does not exist' % datum.file2D
                dataMap[(ii, jj)] = datum

                # add to zData matrix
                self.zData[ii, jj] = datum.z

        if (debug):
            for datum in dataMap.values():
                print datum
            print self.zData

        # refresh 2D plot
        self.drawPlot2D()

        #self.xData = np.array(list(xpts))
        #self.xData.sort()
        #self.yData = np.array(list(ypts))
        #self.yData.sort()


    def drawPlot1D(self, fileName=None):
        if (fileName):
            data = np.loadtxt(fileName)
            self.axes1D.plot(data[:,0], data[:,1])
        else:
            t = np.arange(0.0, 3.0, 0.01)
            s = np.sin(2 * np.pi * t)
            self.axes2D.plot(t, s)

    def drawPlot2D(self):
        try:
            print 'showing zData'
            self.axes2D.matshow(self.zData)
            self.plot1D.draw()
            #Z = np.arange(64).reshape(8,8)
            #self.axes2D.matshow(Z)
        except AttributeError:
            if (debug):
                print 'There is no self.zData matrix'
            Z = np.arange(100).reshape(10,10)
            self.axes2D.matshow(Z)


if __name__ == "__main__":
    app = wx.App(False)
    fr = mainFrame(None)
    panel = CanvasPanel(fr)
    fr.Show()
    # start with focus on first input text box
    if (debug):
        panel.loadBtn.SetFocus()
    else:
        panel.baseInput.SetFocus()
    app.MainLoop()
